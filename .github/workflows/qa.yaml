name: Pucar-Install Workflow DPG-QA
# Workflow branch creating cluster against the input.yaml file
on:
#  push:
#    branches:
#      - Dev-0
  pull_request:
    branches:
      - main
  workflow_dispatch:
  repository_dispatch:
permissions:
  id-token: write
  contents: write
jobs:
  check-changed-files:
    runs-on: ubuntu-latest
    outputs:
      deploy-as-code-changed: ${{ steps.check_files.outputs.deploy-as-code-changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check for changes in deploy-as-code
        id: check_files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            deploy-as-code/**

  Terraform_Infra_Creation:
    needs: check-changed-files
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "true"
      ARM_CLIENT_ID:  ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET:  ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_TENANT_ID:  ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID:  ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform init - Infra creation
        id: init-Infra
        run: terraform init -backend-config="resource_group_name=pucar-qa" -backend-config="storage_account_name=tfstateqa234" -backend-config="container_name=pucar-qa-tfstate" -backend-config="key=infra.tfstate" -reconfigure
        working-directory: infra-as-code/terraform/azure-pucar
      - name: Terraform Validate - Infra creation
        id: validate-Infra
        run: terraform validate -no-color
        working-directory: infra-as-code/terraform/azure-pucar
      - name: Terraform Plan - Infra creation
        id: plan-Infra
        run: terraform plan -no-color -input=false -var-file="tfvars/pucar/qa.tfvars" -var "db_password=${{ secrets.TF_VAR_QA_DB_PASSWORD }}" -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"
        working-directory: infra-as-code/terraform/azure-pucar
      # - name: Terraform Apply - Infra creation
      #   id: apply-Infra
      #   run: terraform apply -no-color -input=false -auto-approve -var-file="tfvars/pucar/qa.tfvars" -var "db_password=${{ secrets.TF_VAR_QA_DB_PASSWORD }}" -var "subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" -var "tenant_id=${{ secrets.AZURE_TENANT_ID }}" -var "client_id=${{ secrets.AZURE_CLIENT_ID }}" -var "client_secret=${{ secrets.AZURE_CLIENT_SECRET }}"
      #   working-directory: infra-as-code/terraform/azure-pucar
      - name: Generate kubeconfig
        run: |
          az aks get-credentials --resource-group "pucar-qa" --name "qa"
          cat ~/.kube/config > kubeconfig
      - name: Kubectl setup
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        id: install
      - name: Verify kubectl configuration
        run: kubectl config view
      - name: Verify kubectl get nodes
        run: |
          kubectl get nodes
      # - name: Updating the terraform output data in environment.yaml files for deployment
      #   run: terraform output -json | go run ../scripts/envYAMLUpdater.go
      #   working-directory: infra-as-code/terraform/azure-pucar

  DIGIT-deployment:
    needs: Terraform_Infra_Creation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Generate kubeconfig
        run: |
          az aks get-credentials --resource-group "pucar-qa" --name "qa"
          cat ~/.kube/config > kubeconfig
      - name: Kubectl setup
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
        id: install
      - name: Creating namespace
        run: kubectl create namespace egov
        continue-on-error: true
      - name: Verify kubectl get nodes
        run: |
          kubectl get nodes
      - name: Install sops
        run: |
          sudo apt update
          sudo apt install -y age
          mkdir -p $HOME/.config/sops/age/
          echo # public key: ${{ secrets.PUBLIC_AGE_KEY }} > $HOME/.config/sops/age/keys.txt
          echo ${{ secrets.PRIVATE_AGE_KEY }} >> $HOME/.config/sops/age/keys.txt
          wget https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux
          chmod +x sops-v3.7.1.linux
          sudo mv sops-v3.7.1.linux /usr/local/bin/sops
      - name: sops decryption
        run: |
          sudo sops --decrypt --age ${{ secrets.PUBLIC_AGE_KEY }} $HOME/work/pucar-DevOps/pucar-DevOps/deploy-as-code/charts/environments/qa-env-secrets.yaml > env-secrets1.yaml
          cp env-secrets1.yaml $HOME/work/pucar-DevOps/pucar-DevOps/deploy-as-code/charts/environments/qa-env-secrets.yaml
      #        working-directory: deploy-as-code/charts/environments

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: 'latest' # Specify the version of Helm
      - name: Install Helmfile
        uses: helmfile/helmfile-action@v1.9.0
        with:
          helmfile-version: 'v0.150.0'
          helm-plugins: >
            https://github.com/databus23/helm-diff
      - name: Commit Id for Latest Deployment
        run: |
          git clone https://github.com/pucardotorg/dristi.git
          cd dristi
          git checkout develop
          advocate_commit=$(git log -1 --pretty=format:%H -- backend/advocate)
          echo "advocate_commit=$advocate_commit" >> $GITHUB_ENV
          application_commit=$(git log -1 --pretty=format:%H -- backend/application)
          echo "application_commit=$application_commit" >> $GITHUB_ENV
          case_commit=$(git log -1 --pretty=format:%H -- backend/case)
          echo "case_commit=$case_commit" >> $GITHUB_ENV
          casemanagement_commit=$(git log -1 --pretty=format:%H -- backend/casemanagement)
          echo "casemanagement_commit=$casemanagement_commit" >> $GITHUB_ENV
          evidence_commit=$(git log -1 --pretty=format:%H -- backend/evidence)
          echo "evidence_commit=$evidence_commit" >> $GITHUB_ENV
          hearing_commit=$(git log -1 --pretty=format:%H -- backend/hearing)
          echo "hearing_commit=$hearing_commit" >> $GITHUB_ENV
          order_commit=$(git log -1 --pretty=format:%H -- backend/order)
          echo "order_commit=$order_commit" >> $GITHUB_ENV
          task_commit=$(git log -1 --pretty=format:%H -- backend/task)
          echo "task_commit=$task_commit" >> $GITHUB_ENV
          analytics_commit=$(git log -1 --pretty=format:%H -- backend/analytics)
          echo "analytics_commit=$analytics_commit" >> $GITHUB_ENV
          dristi_pdf_commit=$(git log -1 --pretty=format:%H -- utilities/dristi-pdf)
          echo "dristi_pdf_commit=$dristi_pdf_commit" >> $GITHUB_ENV
          individual_commit=$(git log -1 --pretty=format:%H -- common/individual)
          echo "individual_commit=$individual_commit" >> $GITHUB_ENV
          case_commit=$(git log -1 --pretty=format:%H -- backend/case)
          echo "case_commit=$case_commit" >> $GITHUB_ENV
          digit_ui_commit=$(git log -1 --pretty=format:%H -- frontend/micro-ui)
          echo "digit_ui_commit=$digit_ui_commit" >> $GITHUB_ENV
      - name: DIGIT Deployment with updated tag
        run: |
          helmfile -f digit-helmfile.yaml apply --include-needs=true \
           --set digit-ui.image.tag=v1.0.0-${digit_ui_commit} \
           --set dristi-pdf.image.tag=v1.0.0-${dristi_pdf_commit} \
           --set advocate.image.tag=v1.0.0-${advocate_commit} \
           --set advocate.initContainers.dbMigration.image.tag=v1.0.0-${advocate_commit} \
           --set casemanagement.image.tag=v1.0.0-${casemanagement_commit} \
           --set casemanagement.initContainers.dbMigration.image.tag=v1.0.0-${casemanagement_commit} \
           --set application.image.tag=v1.0.0-${application_commit} \
           --set application.initContainers.dbMigration.image.tag=v1.0.0-${application_commit} \
           --set case.image.tag=v1.0.0-${case_commit} \
           --set case.initContainers.dbMigration.image.tag=v1.0.0-${case_commit} \
           --set evidence.image.tag=v1.0.0-${evidence_commit} \
           --set evidence.initContainers.dbMigration.image.tag=v1.0.0-${evidence_commit} \
           --set hearing.image.tag=v1.0.0-${hearing_commit} \
           --set hearing.initContainers.dbMigration.image.tag=v1.0.0-${hearing_commit} \
           --set individual.image.tag=v1.0.0-${individual_commit} \
           --set individual.initContainers.dbMigration.image.tag=v1.0.0-${individual_commit} \
           --set order.image.tag=v1.0.0-${order_commit} \
           --set order.initContainers.dbMigration.image.tag=v1.0.0-${order_commit} \
           --set analytics.image.tag=v1.0.0-${analytics_commit} \
           --set task.image.tag=v1.0.0-${task_commit} \
           --set task.initContainers.dbMigration.image.tag=v1.0.0-${task_commit}

        env:
          HELMFILE_ENV: qa
        working-directory: deploy-as-code
