name: Pucar-Install Workflow Solutins-Dev
on:
  push:
    branches:
      - paymentpage-solutions
#  pull_request:
#    branches:
#      - main
  workflow_dispatch:
  repository_dispatch:
permissions:
  id-token: write
  contents: write
jobs:
  check-changed-files:
    runs-on: ubuntu-latest
    outputs:
      deploy-as-code-changed: ${{ steps.check_files.outputs.deploy-as-code-changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check for changes in deploy-as-code
        id: check_files
        uses: tj-actions/changed-files@v42
        with:
          files: |
            deploy-as-code/**

#  Terraform_Infra_Creation:
#    needs: check-changed-files
#    runs-on: ubuntu-latest
#    env:
#      TF_IN_AUTOMATION: "true"
#      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
#      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
#      ARM_CLIENT_ID: ${{ secrets.AZURE_SOLUTIONS_CLIENT_ID }}
#      ARM_CLIENT_SECRET: ${{ secrets.AZURE_SOLUTIONS_CLIENT_SECRET }}
#      db_password: ${{ secrets.TF_VAR_db_password }}
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v2
#
#      - name: Azure login
#        uses: azure/login@v2
#        with:
#          creds: ${{ secrets.SOLUTIONS_AZURE_CREDENTIALS }}
#
#      - name: Terraform init - Infra creation
#        id: init-Infra
#        run: |
#          terraform --version
#          terraform init -backend-config="resource_group_name=pucar-solutions-dev" -backend-config="storage_account_name=tfstate771y4" -backend-config="container_name=pucar-solutions-dev-tfstate" -backend-config="key=infra.tfstate" -reconfigure
#        working-directory: infra-as-code/terraform/azure-pucar
#
#      - name: Terraform Validate - Infra creation
#        id: validate-Infra
#        run: terraform validate -no-color
#        working-directory: infra-as-code/terraform/azure-pucar
#
#      - name: Terraform Plan - Infra creation
#        id: plan-Infra
#        run: terraform plan -no-color -input=false -var-file="tfvars/pucar-solutions/dev.tfvars" -var "db_password=${{ secrets.TF_VAR_db_password }}" -var "ARM_SUBSCRIPTION_ID=${{ env.ARM_SUBSCRIPTION_ID }}" -var "ARM_TENANT_ID=${{ env.ARM_TENANT_ID }}" -var "ARM_CLIENT_ID=${{ env.ARM_CLIENT_ID }}" -var "ARM_CLIENT_SECRET=${{ env.ARM_CLIENT_SECRET }}"
#        working-directory: infra-as-code/terraform/azure-pucar
#
#      - name: Terraform Apply - Infra creation
#        id: apply-Infra
#        run: terraform apply -no-color -input=false -auto-approve -var-file="tfvars/pucar-solutions/dev.tfvars" -var "db_password=${{ secrets.TF_VAR_db_password }}"  -var "ARM_SUBSCRIPTION_ID=${{ env.ARM_SUBSCRIPTION_ID }}" -var "ARM_TENANT_ID=${{ env.ARM_TENANT_ID }}" -var "ARM_CLIENT_ID=${{ env.ARM_CLIENT_ID }}" -var "ARM_CLIENT_SECRET=${{ env.ARM_CLIENT_SECRET }}"
#        working-directory: infra-as-code/terraform/azure-pucar
#
#      - name: Generate kubeconfig
#        run: |
#          az aks get-credentials --resource-group "pucar-solutions-dev" --name "solutions-dev"
#          cat ~/.kube/config > kubeconfig
#      - name: Kubectl setup
#        uses: azure/setup-kubectl@v3
#        with:
#          version: 'latest'
#        id: install
#
#      - name: Verify kubectl configuration
#        run: kubectl config view
#      - name: Verify kubectl get nodes
#        run: |
#          kubectl get nodes

  DIGIT-deployment:
#    if: ${{ github.event_name == 'push' }}
#    needs: Terraform_Infra_Creation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.SOLUTIONS_AZURE_CREDENTIALS }}

      - name: Generate kubeconfig
        run: |
          az aks get-credentials --resource-group "solutions-pucar-dev" --name "solutions-dev"
          cat ~/.kube/config > kubeconfig

      - name: Kubectl setup
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
          id: install

      - name: Creating namespace
        run: kubectl create namespace egov
        continue-on-error: true

      - name: Verify kubectl get nodes
        run: |
          kubectl get nodes

      - name: Install sops
        run: |
          sudo apt update
          sudo apt install -y age
          mkdir -p $HOME/.config/sops/age/
          echo # public key: ${{ secrets.PUBLIC_AGE_KEY }} > $HOME/.config/sops/age/keys.txt
          echo ${{ secrets.PRIVATE_AGE_KEY }} >> $HOME/.config/sops/age/keys.txt
          wget https://github.com/mozilla/sops/releases/download/v3.7.1/sops-v3.7.1.linux
          chmod +x sops-v3.7.1.linux
          sudo mv sops-v3.7.1.linux /usr/local/bin/sops

      - name: sops decryption
        run: |
          sudo sops --decrypt --age ${{ secrets.PUBLIC_AGE_KEY }} $HOME/work/pucar-DevOps/pucar-DevOps/deploy-as-code/charts/environments/solutions-dev-secrets.yaml > env-secrets1.yaml
          cp env-secrets1.yaml $HOME/work/pucar-DevOps/pucar-DevOps/deploy-as-code/charts/environments/solutions-dev-secrets.yaml
#        working-directory: deploy-as-code/charts/environments

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: 'latest' # Specify the version of Helm

      - name: Install Helmfile
        uses: helmfile/helmfile-action@v1.9.0
        with:
          helmfile-version: 'v0.150.0'
          helm-plugins: >
            https://github.com/databus23/helm-diff

      - name: digit deployment
        env:
          HELMFILE_ENV: "solutions-dev"
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          echo ${PAT_TOKEN}
          echo $PAT_TOKEN
          etreasury_commitId=$(git ls-remote https://Rkum113:$PAT_TOKEN@github.com/pucardotorg/etreasury_kerala.git webpage | awk '{print $1}')
          echo "Etreasury Commit ID: $etreasury_commitId"
          helmfile -l deployment=pucar,team!=dpg -f digit-helmfile.yaml apply --include-needs=true\
           --set epayments.image.tag=v1.0.0-${etreasury_commitId}
#        run: |
#          integration_commitId=$(git ls-remote https://github.com/pucardotorg/icops_integration-kerala.git icops_testing | awk '{print $1}')
#          echo "Integration Commit ID: $integration_commitId"
#
#          helmfile -l deployment=pucar,team!=dpg -f digit-helmfile.yaml apply --include-needs=true\
#            --set icops-integration.image.tag=v1.0.0-${integration_commitId} \

        working-directory: deploy-as-code
